%% MAE 298 Estimation Project Matlab Script


%% Extended Kalman Filter: DP Model: 

% Import Battery Parameters 
BatteryParams    

% Load Battery Measurements 
load('OCV_table.mat')
load('OCV_slope_table.mat')
load('IV_data_nonlinear.mat')

% Initial Conditions: 
soc_0 = 1; 
Vc1_0 = 0; 
Vc2_0 = 0; 
P0 = 0 ; 

P(1) = P0; 
x1(1) = soc_0; % SOC
x2(1) = Vc1_0;  % Vc1
x3(1) = Vc2_0; % Vc2

x1_hat(1) = [SOC0]; 

for k = 2:length(t)
    x1(k) = x1(k-1)-(dt/Cbat)*I(k-1); %+normrnd(0,Q);  % SOC - Coulomb Counting 
    x2(k) = (1-(dt/(Rc*Cc)))*x2(k-1)+(dt/Cc)*I(k-1);  % Vc
    
    
    
    
    x1(k) = A(1,1)*x1(k-1) + B(
    x2(k) = 
    x3(k) = 

    
    
    
    
    
    
    
    
    
    
    
    C_ek =  interp1(soc_intpts_OCV_slope' ,OCV_slope_intpts,x1_hat(k-1));
    
    % Model Prediction: 
    x1_hat_prev = Ak*x1_hat(k-1)+Bk*I(k-1);
    P_prev = A_ek*P(k-1)*A_ek'+E_ek*Q*E_ek'; 
    
    % Measurement Update: 
    V_hat = interp1(soc_intpts_OCV' ,OCV_intpts,x1_hat(k-1)) -I(k-1)*R0-x2(k-1);
    L = P_prev*C_ek'*inv(C_ek*P_prev*C_ek'+F_ek*R*F_ek');
    
    x1_hat(k) = x1_hat_prev + L*(V(k)-V_hat); 
    P(k) = P_prev -L*C_ek*P_prev;   
    
end 


